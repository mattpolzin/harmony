!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
"	User.idr	/^        <++> pretty "|"$/;"	c
(""	Util.idr	/^              ("" :: rest, "") => pure (reverse rest)$/;"	d
('-'	Commands.idr	/^           ('-' :: skip) => map (Skip . cast) . parsePositive $ pack skip$/;"	d
(.allAuthors)	PullRequest.idr	/^(.allAuthors) : PRHistory -> List String$/;"	d
(.allReviewers)	PullRequest.idr	/^(.allReviewers) : PRHistory -> (List String, List String)$/;"	d
(.colors)	Data/Config.idr	/^(.colors) : Config -> Bool$/;"	d
(.editor)	Data/Config.idr	/^(.editor) : Config -> Maybe String$/;"	d
(.filepath)	Data/Config.idr	/^(.filepath) : Config -> String$/;"	d
(.webURI)	Data/PullRequest.idr	/^(.webURI) : Config => PullRequest -> String$/;"	d
(<||>)	Commands.idr	/^(<||>) : Alternative t => (a -> t b) -> (a -> t b) -> a -> t b$/;"	d
(Yes	PullRequest.idr	/^  _ | (Yes prf, Yes prf') with ((S pageBreaks) `isLTE` (finToNat prCount))$/;"	c
(args	Commands.idr	/^             (args : List ContributeArg)$/;"	d
(assignArgs	Commands.idr	/^         (assignArgs : List String) $/;"	d
(author	PullRequest.idr	/^                (author : String)$/;"	d
(branch	PullRequest.idr	/^                     (branch : String) $/;"	d
(closedReviews	Data/ReviewScore.idr	/^                  (closedReviews : List login)$/;"	d
(closedReviews	Graph.idr	/^               (closedReviews : List login)$/;"	d
(closedReviews	Reviewer.idr	/^                  (closedReviews : List login)$/;"	d
(envGithubPAT	Config.idr	/^                     (envGithubPAT : Maybe String)$/;"	d
(envGithubPAT	Config.idr	/^               (envGithubPAT : Maybe String)$/;"	d
(envGithubPAT	Main.idr	/^                       (envGithubPAT : Maybe String)$/;"	d
(envGithubPAT	Main.idr	/^             (envGithubPAT : Maybe String)$/;"	d
(labels	Commands.idr	/^        (labels : List String)$/;"	d
(org	Config.idr	/^         (org ::: repo :: []) <- pure $ split (== '\/') orgAndRepo$/;"	d
(org	FFI/GitHub.idr	/^                       (org : String)$/;"	d
(org	FFI/GitHub.idr	/^                  (org : String) $/;"	d
(org	FFI/GitHub.idr	/^                 (org : String)$/;"	d
(owner	FFI/GitHub.idr	/^                          (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                         (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                    (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                   (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                  (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                (owner : String) $/;"	d
(owner	FFI/GitHub.idr	/^                (owner : String)$/;"	d
(owner	FFI/GitHub.idr	/^           (owner : String) $/;"	d
(prop	Config.idr	/^            (prop : String)$/;"	d
(subcommand	Main.idr	/^                 (subcommand : String)$/;"	d
(team	Commands.idr	/^           (team : String) $/;"	d
(terminalColors	Config.idr	/^             (terminalColors : Bool)$/;"	d
>	Commands.idr	/^(<||>) f g x = f x <|> g x$/;"	c
>	Config.idr	/^  Just pat <- pure $ envGithubPAT <|> configPAT$/;"	c
>	Config.idr	/^  defaultOrgAndRepo <- (parseGitHubURI <$> remoteURI remoteGuess) <|> pure Nothing$/;"	c
>	Config.idr	/^parseGitHubURI str = parseHTTPS str <|> parseSSH str$/;"	c
>	Main.idr	/^   Just pat <- pure $ envPAT <|> expose <$> config.githubPAT$/;"	c
Add	Data/ReviewScore.idr	/^      data Op = Add | Subtract$/;"	c
Approved	Data/Review.idr	/^data State = Approved | Commented | ChangesRequested | Dismissed$/;"	c
AssignTeams	Data/Config.idr	/^  AssignTeams     : SettableProp$/;"	d
AssignUsers	Data/Config.idr	/^  AssignUsers     : SettableProp$/;"	d
Augmented	Graph.idr	/^  Augmented : ReviewScore login -> (bonus : Nat) -> AugmentedReviewScore login$/;"	d
AugmentedReviewScore	Graph.idr	/^data AugmentedReviewScore : login -> Type where$/;"	t
Checkout	Commands.idr	/^data ContributeArg = Checkout | Skip Nat$/;"	c
Closed	Data/PullRequest.idr	/^  data GitHubPRState = Open | Closed$/;"	c
CommentOnAssign	Data/Config.idr	/^  CommentOnAssign : SettableProp$/;"	d
Config	Data/Config.idr	/^record Config where$/;"	t
ConfigError	Config.idr	/^data ConfigError = File FileError$/;"	t
ContributeArg	Commands.idr	/^data ContributeArg = Checkout | Skip Nat$/;"	t
Created	PullRequest.idr	/^data IdentifiedOrCreated = Identified | Created$/;"	c
Date	Data/Date.idr	/^record Date where$/;"	t
Day	Data/Date.idr	/^              | Day$/;"	c
DefaultRemote	Data/Config.idr	/^  DefaultRemote   : SettableProp$/;"	d
Dismissed	Data/Review.idr	/^data State = Approved | Commented | ChangesRequested | Dismissed$/;"	c
End	Util.idr	/^    data Part = Start | Proj | Dash | Num | End$/;"	c
Ephemeral	Data/Config.idr	/^record Ephemeral where$/;"	t
Fail	Data/Date.idr	/^              | Fail$/;"	c
File	Config.idr	/^data ConfigError = File FileError$/;"	c
Future	FFI/Concurrency.idr	/^data Future : Type where [external]$/;"	t
G	FFI/Git.idr	/^data Git = G (Ptr GitRef)$/;"	c
Git	FFI/Git.idr	/^data Git = G (Ptr GitRef)$/;"	t
GitHubPRState	Data/PullRequest.idr	/^  data GitHubPRState = Open | Closed$/;"	t
GitRef	FFI/Git.idr	/^data GitRef : Type$/;"	t
GitRemote	Config.idr	/^record GitRemote where$/;"	t
GithubPAT	Data/Config.idr	/^  GithubPAT       : SettableProp$/;"	d
GraphArg	Commands.idr	/^data GraphArg : Type where$/;"	t
Identified	PullRequest.idr	/^data IdentifiedOrCreated = Identified | Created$/;"	c
IdentifiedOrCreated	PullRequest.idr	/^data IdentifiedOrCreated = Identified | Created$/;"	t
IncludeCompletedReviews	Commands.idr	/^  IncludeCompletedReviews : GraphArg$/;"	d
Just	Config.idr	/^  _ | Just (Evidence _ p) with ((propSetter p) config value)$/;"	c
Kit	FFI/GitHub.idr	/^data Octokit = Kit (Ptr OctokitRef)$/;"	c
Merged	Data/PullRequest.idr	/^data PRState = Open | Closed | Merged$/;"	c
Month	Data/Date.idr	/^    data PrimaryPart = Year | Month$/;"	c
Octokit	FFI/GitHub.idr	/^data Octokit = Kit (Ptr OctokitRef)$/;"	t
OctokitRef	FFI/GitHub.idr	/^data OctokitRef : Type$/;"	t
Op	Data/ReviewScore.idr	/^      data Op = Add | Subtract$/;"	t
Open	Data/PullRequest.idr	/^  data GitHubPRState = Open | Closed$/;"	c
Open	Data/PullRequest.idr	/^data PRState = Open | Closed | Merged$/;"	c
PRHistory	PullRequest.idr	/^record PRHistory where$/;"	t
PRState	Data/PullRequest.idr	/^data PRState = Open | Closed | Merged$/;"	t
Parse	Config.idr	/^                 | Parse String$/;"	c
Part	Data/Date.idr	/^    data Part = Start$/;"	t
Part	Util.idr	/^    data Part = Start | Proj | Dash | Num | End$/;"	t
Partial	Data/Date.idr	/^    Partial : Part -> Type$/;"	d
PrimaryPart	Data/Date.idr	/^    data PrimaryPart = Year | Month$/;"	t
PromiseShape	Data/Promise.idr	/^PromiseShape : Type -> Type$/;"	d
PullRequest	Data/PullRequest.idr	/^record PullRequest where$/;"	t
Review	Data/Review.idr	/^record Review where$/;"	t
SettableProp	Data/Config.idr	/^data SettableProp : (name : String) -> (help : String) -> Type where$/;"	t
Skip	Commands.idr	/^data ContributeArg = Checkout | Skip Nat$/;"	c
SomeSettableProp	Data/Config.idr	/^SomeSettableProp : Type$/;"	d
Start	Data/Date.idr	/^    data Part = Start$/;"	c
Start	Util.idr	/^    data Part = Start | Proj | Dash | Num | End$/;"	c
State	Data/Review.idr	/^data State = Approved | Commented | ChangesRequested | Dismissed$/;"	t
Subtract	Data/ReviewScore.idr	/^      data Op = Add | Subtract$/;"	c
TeamName	Commands.idr	/^  TeamName : String -> GraphArg$/;"	d
Timestamp	Data/Config.idr	/^Timestamp : Type$/;"	d
User	Data/User.idr	/^record User where$/;"	t
Year	Data/Date.idr	/^    data PrimaryPart = Year | Month$/;"	c
\{argument	Help.idr	/^  \\{subcommand "assign"} {\\{argument "<team-slug>"} | \\{argument "+<user-login>"}} [...]$/;"	c
addLabels	Label.idr	/^addLabels : Config => Octokit =>$/;"	d
addPullLabels	FFI/GitHub.idr	/^addPullLabels : Octokit =>$/;"	d
addPullReviewers	FFI/GitHub.idr	/^addPullReviewers : Octokit => $/;"	d
all	FFI/Concurrency.idr	/^all : HasIO io => Foldable t => t Future -> io Future$/;"	d
allRootCmds	BashCompletion.idr	/^allRootCmds : List String$/;"	d
appVersion	AppVersion.idr	/^appVersion : String$/;"	d
argument	Help.idr	/^    argument : String -> String$/;"	d
array	Language/JSON/Accessors.idr	/^array : (JSON -> Either String a) -> JSON -> Either String (List a)$/;"	d
assign	Commands.idr	/^assign : Config => Git => Octokit => $/;"	d
assignTeams	Data/Config.idr	/^  assignTeams   : Bool$/;"	d
assignUsers	Data/Config.idr	/^  assignUsers   : Bool$/;"	d
augment	Graph.idr	/^    augment : (completedReviews : SortedMap login Nat) -> ReviewScore login -> AugmentedReviewScore login$/;"	d
augmentedOptions	Graph.idr	/^      augmentedOptions : List (AugmentedReviewScore login) = $/;"	d
author	Data/PullRequest.idr	/^  author    : String$/;"	d
author	Data/Review.idr	/^  author      : String$/;"	d
bar	Graph.idr	/^bar : (indentation : Nat) -> (score : Nat) -> (detractor : Nat) -> (bonus : Nat) -> Doc AnsiStyle$/;"	d
bashCompletion	Main.idr	/^bashCompletion : HasIO io => $/;"	d
bind	Data/Promise.idr	/^bind : Promise a -> (a -> Promise b) -> Promise b$/;"	d
bool	Language/JSON/Accessors.idr	/^bool : JSON -> Either String Bool$/;"	d
both	FFI/Concurrency.idr	/^    both : Future -> io Future -> io Future$/;"	d
branch	Commands.idr	/^branch : Config => Git => Promise ()$/;"	d
calc	Data/ReviewScore.idr	/^          calc : Nat -> Nat -> Nat$/;"	d
centerOffset	User.idr	/^          centerOffset : Double = ((cast pageWidth) \/ 2) - ((cast full) \/ 2)$/;"	d
chart	User.idr	/^    chart : (leftPadding : Nat)$/;"	d
checkAssignSettings	Config.idr	/^    checkAssignSettings : Config -> Either (Doc AnsiStyle) ()$/;"	d
checkConfigConsistency	Config.idr	/^checkConfigConsistency : Config -> Either (Doc AnsiStyle) ()$/;"	d
checkoutBranch	FFI/Git.idr	/^checkoutBranch : Git => (branch : String) -> Promise ()$/;"	d
chooseReviewers	Reviewer.idr	/^chooseReviewers : Ord login =>$/;"	d
closedPRs	PullRequest.idr	/^  closedPRs : List PullRequest$/;"	d
cmd	Data/Promise.idr	/^  cmd : (a -> IO ()) -> (String -> IO ()) -> IO ()$/;"	d
cmdOpts	BashCompletion.idr	/^cmdOpts : (subcommand : String) -> (curWord : String) -> (prevWord : String) -> Maybe (List String)$/;"	d
colors	Data/Config.idr	/^  colors   : Bool$/;"	d
combined	PullRequest.idr	/^combined : PRHistory -> List PullRequest$/;"	d
combinedScore	Data/ReviewScore.idr	/^  combinedScore : Nat$/;"	d
commentOnAssign	Data/Config.idr	/^  commentOnAssign : Bool$/;"	d
concurrency_ffi	FFI/Concurrency.idr	/^concurrency_ffi : String -> String$/;"	d
configuredOpts	Main.idr	/^    configuredOpts : io (List String)$/;"	d
contribute	Commands.idr	/^contribute : Config => Git => Octokit =>$/;"	d
countReviewsByEachUser	PullRequest.idr	/^countReviewsByEachUser : Config => Octokit =>$/;"	d
createComment	FFI/GitHub.idr	/^createComment : Octokit => $/;"	d
createConfig	Config.idr	/^createConfig : Git =>$/;"	d
createPR	FFI/GitHub.idr	/^createPR : Octokit => $/;"	d
createPR	PullRequest.idr	/^      createPR : Promise PullRequest$/;"	d
createdAt	Data/PullRequest.idr	/^  createdAt : Date$/;"	d
csv	PullRequest.idr	/^    csv : List String -> String$/;"	d
currentBranch	FFI/Git.idr	/^currentBranch : Git => Promise String$/;"	d
defaultRemote	Data/Config.idr	/^        defaultRemote : String$/;"	d
defaultRemote	Data/Config.idr	/^  defaultRemote : Maybe String$/;"	d
defaultStr	Config.idr	/^    defaultStr : (GitRemote -> String) -> Maybe GitRemote -> String$/;"	d
details	User.idr	/^      details : Doc AnsiStyle$/;"	d
drop'	Config.idr	/^    drop' : List Char -> Maybe (List Char)$/;"	d
dropPrefix'	Config.idr	/^dropPrefix' : (prefx : String) -> String -> Maybe String$/;"	d
editor	Data/Config.idr	/^  editor   : Maybe String$/;"	d
editorDescription	PullRequest.idr	/^      editorDescription : HasIO io => (editor : String) -> (templateFilePath : String) -> io (Either FileError String)$/;"	d
either	Data/Promise.idr	/^either : Show e => Either e a -> Promise a$/;"	d
email	User.idr	/^      email : Doc AnsiStyle$/;"	d
empty	PullRequest.idr	/^empty : PRHistory$/;"	d
enterForDefaultStr	Config.idr	/^    enterForDefaultStr : String -> String$/;"	d
ephemeral	Data/Config.idr	/^  ephemeral     : Ephemeral -- not written out to file$/;"	d
exitError	Main.idr	/^exitError : HasIO io => $/;"	d
expose	Data/Config.idr	/^expose : Hidden a -> a$/;"	d
filename	Data/Config.idr	/^filename : String$/;"	d
filepath	Data/Config.idr	/^  filepath : String$/;"	d
findConfig	Config.idr	/^findConfig : HasIO io => (startDir : String) -> Fuel -> io (Maybe String)$/;"	d
fork	FFI/Concurrency.idr	/^fork : HasIO io => (args : String) -> io Future$/;"	d
forkedPRs	PullRequest.idr	/^forkedPRs : (perPage : Nat) -> (currentPageIdx : Nat) -> (currentPageSize : Nat) -> (x : ()) -> Promise Future$/;"	d
forkedReviews	PullRequest.idr	/^    forkedReviews : PullRequest -> Promise Future$/;"	d
forkedUser	Commands.idr	/^    forkedUser : (login : String) -> Promise Future$/;"	d
fullName	User.idr	/^      fullName : Doc AnsiStyle$/;"	d
getConfig	Config.idr	/^getConfig : Config =>$/;"	d
getManyLines	Util.idr	/^getManyLines : HasIO io => Fuel -> io (List String)$/;"	d
getMoreLines	Util.idr	/^    getMoreLines : (acc : List String) -> Fuel -> io (List String)$/;"	d
getRepoDefaultBranch	FFI/GitHub.idr	/^getRepoDefaultBranch : Octokit =>$/;"	d
getSelf	FFI/GitHub.idr	/^getSelf : Octokit => Promise User$/;"	d
getUser	FFI/GitHub.idr	/^getUser : Octokit => (username : String) -> Promise User$/;"	d
git	FFI/Git.idr	/^git : HasIO io => io Git$/;"	d
git_ffi	FFI/Git.idr	/^git_ffi : (fnName : String) -> String$/;"	d
githubPAT	Data/Config.idr	/^  githubPAT     : Maybe (Hidden String)$/;"	d
go	Data/Date.idr	/^    go : (part ** Partial part) -> Char -> (part ** Partial part)$/;"	d
go	Util.idr	/^    go : (Part, List Char) -> Char -> (Part, List Char)$/;"	d
graph	Commands.idr	/^graph : Config => Octokit =>$/;"	d
graph	Graph.idr	/^graph : Pretty login => (highScore : Nat) -> List (AugmentedReviewScore login) -> Doc AnsiStyle$/;"	d
graph	User.idr	/^    graph : Doc AnsiStyle$/;"	d
graphOne	Graph.idr	/^graphOne : Pretty login => (highScore : Nat) -> (AugmentedReviewScore login) -> Doc AnsiStyle$/;"	d
green	User.idr	/^      green : String -> Doc AnsiStyle$/;"	d
greenBox	Graph.idr	/^    greenBox : Doc AnsiStyle$/;"	d
guardSuccess	Data/Date.idr	/^    guardSuccess : (part ** Partial part) -> Maybe Date$/;"	d
guardSuccess	Util.idr	/^    guardSuccess : (Part, List Char) -> Maybe (List Char)$/;"	d
handleArgs	Main.idr	/^handleArgs : Git =>$/;"	d
handleAuthenticatedArgs	Main.idr	/^handleAuthenticatedArgs : Config => Git => Octokit => $/;"	d
handleConfiguredArgs	Main.idr	/^handleConfiguredArgs : Config => Git =>$/;"	d
handleUnsetEmail	User.idr	/^        handleUnsetEmail : String -> Maybe String$/;"	d
headRef	Data/PullRequest.idr	/^  headRef : String$/;"	d
header	Graph.idr	/^    header : Doc AnsiStyle$/;"	d
header	User.idr	/^  header : (leftPadding : Nat)$/;"	d
heading	Help.idr	/^    heading : String -> String$/;"	d
help	Config.idr	/^    help : (String, String) -> Doc AnsiStyle$/;"	d
help	Help.idr	/^help : (decorated : Bool) -> String$/;"	d
hide	Data/Config.idr	/^hide : a -> Hidden a$/;"	d
identifyOrCreatePR	PullRequest.idr	/^identifyOrCreatePR : Config => Git => Octokit => $/;"	d
inlineDescription	PullRequest.idr	/^      inlineDescription : HasIO io => io String$/;"	d
integer	Language/JSON/Accessors.idr	/^integer : JSON -> Either String Integer$/;"	d
intro	User.idr	/^  intro : String$/;"	d
isAuthor	Data/PullRequest.idr	/^isAuthor : String -> PullRequest -> Bool$/;"	d
isAuthor	Data/Review.idr	/^isAuthor : String -> Review -> Bool$/;"	d
isRequestedReviewer	Data/PullRequest.idr	/^isRequestedReviewer : String -> PullRequest -> Bool$/;"	d
it	User.idr	/^      it : String -> Doc AnsiStyle$/;"	d
ital	User.idr	/^      ital : String -> Doc AnsiStyle$/;"	d
json	Data/Config.idr	/^json : Config -> JSON$/;"	d
json	Data/User.idr	/^json : User -> JSON$/;"	d
label	Commands.idr	/^label : Config => Git => Octokit =>$/;"	d
leftTitle	User.idr	/^  leftTitle : String$/;"	d
list	Commands.idr	/^list : Config => Octokit =>$/;"	d
listMyTeams	FFI/GitHub.idr	/^listMyTeams : Octokit => Promise (List String)$/;"	d
listOrgMembers	FFI/GitHub.idr	/^listOrgMembers : Octokit => (org : String) -> Promise (List String)$/;"	d
listPRsForBranch	FFI/GitHub.idr	/^listPRsForBranch : Octokit => $/;"	d
listPartitionedPRs	PullRequest.idr	/^listPartitionedPRs : Config => Octokit =>$/;"	d
listPullRequests	FFI/GitHub.idr	/^listPullRequests : Octokit => $/;"	d
listPullRequestsJsonStr	FFI/GitHub.idr	/^listPullRequestsJsonStr : Octokit =>$/;"	d
listPullReviewers	FFI/GitHub.idr	/^listPullReviewers : Octokit => $/;"	d
listPullReviews	FFI/GitHub.idr	/^listPullReviews : Octokit => $/;"	d
listPullReviewsJsonStr	FFI/GitHub.idr	/^listPullReviewsJsonStr : Octokit => $/;"	d
listRemotes	FFI/Git.idr	/^listRemotes : Git => Promise (List String)$/;"	d
listRepoLabels	FFI/GitHub.idr	/^listRepoLabels : Octokit =>$/;"	d
listReviewers	PullRequest.idr	/^listReviewers : Config => Octokit =>$/;"	d
listTeamMembers	FFI/GitHub.idr	/^listTeamMembers : Octokit => $/;"	d
listTeams	FFI/GitHub.idr	/^listTeams : Octokit => (org : String) -> Promise (List String)$/;"	d
loadConfig	Config.idr	/^loadConfig : HasIO io => $/;"	d
loadOrCreateConfig	Config.idr	/^loadOrCreateConfig : Git =>$/;"	d
login	Data/User.idr	/^  login : String$/;"	d
login	User.idr	/^      login : Doc AnsiStyle$/;"	d
loginScore	Data/ReviewScore.idr	/^loginScore : ReviewScore login -> (login, Nat)$/;"	d
longestSettablePropName	Data/Config.idr	/^longestSettablePropName : Nat$/;"	d
lookup'	Language/JSON/Accessors.idr	/^    lookup' : String -> List (String, a) -> Either String a$/;"	d
lookupAll	Language/JSON/Accessors.idr	/^lookupAll : Vect n String -> List (String, JSON) -> Either String (Vect n JSON)$/;"	d
main	Main.idr	/^main : IO ()$/;"	d
mainBranch	Data/Config.idr	/^  mainBranch    : String$/;"	d
maxValue	Graph.idr	/^    maxValue : List (a, Nat) -> Nat$/;"	d
maybeDecorate	Help.idr	/^    maybeDecorate : (String -> Doc AnsiStyle) -> String -> String$/;"	d
name	Data/User.idr	/^  name  : String$/;"	d
node_ffi	FFI.idr	/^node_ffi : (libName : String) -> (fnName : String) -> String$/;"	d
number	Data/PullRequest.idr	/^  number    : Integer$/;"	d
object	Language/JSON/Accessors.idr	/^object : JSON -> Either String (List (String, JSON))$/;"	d
octokit	FFI/GitHub.idr	/^octokit : (authToken : String) -> IO Octokit$/;"	d
okit_ffi	FFI/GitHub.idr	/^okit_ffi : (fnName : String) -> String$/;"	d
oneDayAgo	Config.idr	/^    oneDayAgo : HasIO io => io Timestamp$/;"	d
openPRs	PullRequest.idr	/^  openPRs   : List PullRequest$/;"	d
option	Help.idr	/^    option : String -> String$/;"	d
optional	Language/JSON/Accessors.idr	/^optional : (JSON -> Either String a) -> JSON -> Either String (Maybe a)$/;"	d
opts	BashCompletion.idr	/^opts : Config => (subcommand : String) -> (curWord : String) -> (prevWord : String) -> List String$/;"	d
orIfEmpty	Config.idr	/^    orIfEmpty : Maybe String -> String -> String$/;"	d
org	Config.idr	/^    org : Maybe GitRemote -> Maybe String$/;"	d
org	Data/Config.idr	/^  org           : String$/;"	d
orgMembers	Data/Config.idr	/^  orgMembers    : List String$/;"	d
pad	Data/Date.idr	/^      pad : Nat -> String$/;"	d
parseBool	Config.idr	/^parseBool : String -> Maybe Bool$/;"	d
parseCheckoutFlag	Commands.idr	/^    parseCheckoutFlag : String -> Maybe ContributeArg$/;"	d
parseCompletedFlag	Commands.idr	/^    parseCompletedFlag : String -> Maybe GraphArg$/;"	d
parseConfig	Data/Config.idr	/^parseConfig : (ephemeral : Ephemeral) -> (filecontents : String) -> Either String Config$/;"	d
parseConfigJson	Data/Config.idr	/^    parseConfigJson : JSON -> Either String Config$/;"	d
parseContributeArgs	Commands.idr	/^parseContributeArgs : List String -> Either String (List ContributeArg)$/;"	d
parseDateString	Data/Date.idr	/^parseDateString : String -> Maybe Date$/;"	d
parseDateTime	Data/PullRequest.idr	/^parseDateTime : String -> Either String Date$/;"	d
parseDateTime	Data/Review.idr	/^parseDateTime : String -> Either String Date$/;"	d
parseDateTimeString	Data/Date.idr	/^parseDateTimeString : String -> Maybe Date$/;"	d
parseGitHubURI	Config.idr	/^parseGitHubURI : String -> Maybe GitRemote$/;"	d
parseGraphArgs	Commands.idr	/^parseGraphArgs : List String -> Either String (List GraphArg)$/;"	d
parseHTTPS	Config.idr	/^    parseHTTPS : String -> Maybe GitRemote$/;"	d
parseJiraPrefix	Util.idr	/^parseJiraPrefix : String -> Maybe String$/;"	d
parseLim	Main.idr	/^    parseLim : String -> Maybe (Fin 101)$/;"	d
parseNat	Data/Date.idr	/^    parseNat : Char -> Maybe Nat$/;"	d
parsePR	Data/PullRequest.idr	/^parsePR : JSON -> Either String PullRequest$/;"	d
parsePg	Main.idr	/^    parsePg  : String -> Maybe Nat$/;"	d
parsePositiveReversed	Data/Date.idr	/^parsePositiveReversed : List Char -> Maybe Nat$/;"	d
parsePullRequestString	Data/PullRequest.idr	/^parsePullRequestString : String -> Either String PullRequest$/;"	d
parsePullRequestsString	Data/PullRequest.idr	/^parsePullRequestsString : String -> Either String (List PullRequest)$/;"	d
parseReview	Data/Review.idr	/^parseReview : JSON -> Either String Review$/;"	d
parseReviewString	Data/Review.idr	/^parseReviewString : String -> Either String Review$/;"	d
parseReviewsString	Data/Review.idr	/^parseReviewsString : String -> Either String (List Review)$/;"	d
parseSSH	Config.idr	/^    parseSSH : String -> Maybe GitRemote$/;"	d
parseSkipArg	Commands.idr	/^    parseSkipArg : String -> Maybe ContributeArg$/;"	d
parseState	Data/PullRequest.idr	/^parseState : (merged : Bool) -> String -> Either String PRState$/;"	d
parseState	Data/Review.idr	/^parseState : String -> Either String State$/;"	d
parseSuffix	Config.idr	/^    parseSuffix : String -> Maybe GitRemote$/;"	d
parseTeamArg	Commands.idr	/^    parseTeamArg : String -> Maybe GraphArg$/;"	d
parseUser	Data/User.idr	/^parseUser : JSON -> Either String User$/;"	d
parseUserString	Data/User.idr	/^parseUserString : String -> Either String User$/;"	d
parseUsersString	Data/User.idr	/^parseUsersString : String -> Either String (List User)$/;"	d
partialScore	Data/ReviewScore.idr	/^  partialScore  : Nat$/;"	d
partition	PullRequest.idr	/^partition : List PullRequest -> PRHistory$/;"	d
partition'	PullRequest.idr	/^partition' : Pagination _ _ _ () -> Promise PRHistory$/;"	d
partitionedArgs	Commands.idr	/^    partitionedArgs : (List String, List String)$/;"	d
personalAccessToken	Data/Config.idr	/^        personalAccessToken : String$/;"	d
pr	Commands.idr	/^pr : Config => Git => Octokit =>$/;"	d
prComment	PullRequest.idr	/^    prComment : String -> String$/;"	d
prCount	User.idr	/^  prCount : Fin 101$/;"	d
preferOriginRemote	Config.idr	/^preferOriginRemote : List String -> String$/;"	d
prepareDescriptionFile	PullRequest.idr	/^      prepareDescriptionFile : HasIO io => (templateFilePath : String) -> io ()$/;"	d
prim__addLabels	FFI/GitHub.idr	/^prim__addLabels : Ptr OctokitRef$/;"	d
prim__addPullReviewers	FFI/GitHub.idr	/^prim__addPullReviewers : Ptr OctokitRef $/;"	d
prim__awaitStringify	FFI/Concurrency.idr	/^prim__awaitStringify : Future -> (onSuccess : String -> PrimIO ()) -> (onError : String -> PrimIO ()) -> PrimIO ()$/;"	d
prim__both	FFI/Concurrency.idr	/^prim__both : Future -> Future -> PrimIO Future$/;"	d
prim__checkoutBranch	FFI/Git.idr	/^prim__checkoutBranch : Ptr GitRef$/;"	d
prim__createComment	FFI/GitHub.idr	/^prim__createComment : Ptr OctokitRef $/;"	d
prim__createPR	FFI/GitHub.idr	/^prim__createPR : Ptr OctokitRef $/;"	d
prim__currentBranch	FFI/Git.idr	/^prim__currentBranch : Ptr GitRef$/;"	d
prim__flatten	FFI/Concurrency.idr	/^prim__flatten : Future -> PrimIO Future$/;"	d
prim__future	FFI/Concurrency.idr	/^prim__future : (args : String) -> PrimIO Future$/;"	d
prim__getRepoDefaultBranch	FFI/GitHub.idr	/^prim__getRepoDefaultBranch : Ptr OctokitRef$/;"	d
prim__getSelf	FFI/GitHub.idr	/^prim__getSelf : Ptr OctokitRef $/;"	d
prim__getUser	FFI/GitHub.idr	/^prim__getUser : Ptr OctokitRef $/;"	d
prim__git	FFI/Git.idr	/^prim__git : PrimIO (Ptr GitRef)$/;"	d
prim__listMyTeams	FFI/GitHub.idr	/^prim__listMyTeams : Ptr OctokitRef$/;"	d
prim__listOrgMembers	FFI/GitHub.idr	/^prim__listOrgMembers : Ptr OctokitRef $/;"	d
prim__listPRsForBranch	FFI/GitHub.idr	/^prim__listPRsForBranch : Ptr OctokitRef $/;"	d
prim__listPullRequests	FFI/GitHub.idr	/^prim__listPullRequests : Ptr OctokitRef $/;"	d
prim__listPullReviewers	FFI/GitHub.idr	/^prim__listPullReviewers : Ptr OctokitRef $/;"	d
prim__listPullReviews	FFI/GitHub.idr	/^prim__listPullReviews : Ptr OctokitRef $/;"	d
prim__listRemotes	FFI/Git.idr	/^prim__listRemotes : Ptr GitRef$/;"	d
prim__listRepoLabels	FFI/GitHub.idr	/^prim__listRepoLabels : Ptr OctokitRef$/;"	d
prim__listTeamMembers	FFI/GitHub.idr	/^prim__listTeamMembers : Ptr OctokitRef $/;"	d
prim__listTeams	FFI/GitHub.idr	/^prim__listTeams : Ptr OctokitRef$/;"	d
prim__neutral	FFI/Concurrency.idr	/^prim__neutral : PrimIO Future$/;"	d
prim__octokit	FFI/GitHub.idr	/^prim__octokit : (authToken : String) -> PrimIO (Ptr OctokitRef)$/;"	d
prim__pushNewBranch	FFI/Git.idr	/^prim__pushNewBranch : Ptr GitRef$/;"	d
prim__remoteTrackingBranch	FFI/Git.idr	/^prim__remoteTrackingBranch : Ptr GitRef$/;"	d
prim__remoteURI	FFI/Git.idr	/^prim__remoteURI : Ptr GitRef$/;"	d
prim__rootDir	FFI/Git.idr	/^prim__rootDir : Ptr GitRef$/;"	d
prim__singleton	FFI/Concurrency.idr	/^prim__singleton : Future -> PrimIO Future$/;"	d
prim__userEmail	FFI/Git.idr	/^prim__userEmail : Ptr GitRef$/;"	d
print	User.idr	/^      print : Doc AnsiStyle$/;"	d
print	User.idr	/^  print : (gitEmail : Maybe String)$/;"	d
printInfoOnSelf	User.idr	/^  printInfoOnSelf : Config => Octokit => Git =>$/;"	d
printVersion	AppVersion.idr	/^printVersion : HasIO io => io ()$/;"	d
promiseAll	FFI/Concurrency.idr	/^promiseAll : Foldable t => t Future -> Promise (List JSON)$/;"	d
promiseIO	FFI.idr	/^promiseIO : (primFn : (String -> PrimIO ()) -> (String -> PrimIO ()) -> PrimIO ()) -> Promise String$/;"	d
promisify	Data/Promise.idr	/^promisify : PromiseShape a -> Promise a$/;"	d
propGetter	Config.idr	/^propGetter : SettableProp n h -> (Config -> String)$/;"	d
propHelp	Data/Config.idr	/^propHelp : {h : _} -> SettableProp n h -> String$/;"	d
propHelp'	Data/Config.idr	/^propHelp' : SomeSettableProp -> String$/;"	d
propName	Data/Config.idr	/^propName : {n : _} -> SettableProp n h -> String$/;"	d
propName'	Data/Config.idr	/^propName' : SomeSettableProp -> String$/;"	d
propSetter	Config.idr	/^propSetter : SettableProp n h -> (Config -> String -> Maybe Config)$/;"	d
pullRequestStateFilter	FFI/GitHub.idr	/^pullRequestStateFilter : Maybe GitHubPRState -> String$/;"	d
pushNewBranch	FFI/Git.idr	/^pushNewBranch : Git => (remoteName : String) -> (branch : String) -> Promise ()$/;"	d
putLabel	Commands.idr	/^    putLabel : String -> Doc AnsiStyle$/;"	d
putLabels	Commands.idr	/^    putLabels : List String -> Doc AnsiStyle$/;"	d
putNameLn	Commands.idr	/^    putNameLn : User -> Doc AnsiStyle$/;"	d
randomReviewer	Reviewer.idr	/^randomReviewer : HasIO io => List (login, Nat) -> io (Maybe login)$/;"	d
redDot	Graph.idr	/^    redDot : Doc AnsiStyle$/;"	d
reflect	Commands.idr	/^reflect : Config => Octokit =>$/;"	d
reflectOnSelf	User.idr	/^  reflectOnSelf : Config => Octokit =>$/;"	d
reject	Data/Promise.idr	/^reject : String -> Promise a$/;"	d
relativeToRoot	Util.idr	/^relativeToRoot : Git => String -> Promise String$/;"	d
remoteTrackingBranch	FFI/Git.idr	/^remoteTrackingBranch : Git => Promise (Maybe String)$/;"	d
remoteURI	FFI/Git.idr	/^remoteURI : Git => (remoteName : String) -> Promise String$/;"	d
renderIO	Util.idr	/^renderIO : Config => HasIO io => Doc AnsiStyle -> io ()$/;"	d
renderString	Util.idr	/^renderString : Config => Doc AnsiStyle -> String$/;"	d
replicate'	User.idr	/^replicate' : Color -> Nat -> Char -> Doc AnsiStyle$/;"	d
repo	Config.idr	/^    repo : Maybe GitRemote -> Maybe String$/;"	d
repo	Data/Config.idr	/^  repo          : String$/;"	d
repoLabels	Data/Config.idr	/^  repoLabels    : List String$/;"	d
requestReviewers	PullRequest.idr	/^requestReviewers : Config => Octokit => $/;"	d
resolve	Data/Promise.idr	/^resolve : Promise a -> (a -> IO ()) -> (String -> IO ()) -> IO ()$/;"	d
resolve'	Data/Promise.idr	/^resolve' : (a -> IO ()) -> (String -> IO ()) -> Promise a -> IO ()$/;"	d
resolve''	Main.idr	/^resolve'' : Promise () -> IO ()$/;"	d
reviewDetailsCount	User.idr	/^  reviewDetailsCount : Fin 101$/;"	d
reviewers	Data/PullRequest.idr	/^  reviewers : List String$/;"	d
reviewsByEachUser	PullRequest.idr	/^reviewsByEachUser : Config => Octokit =>$/;"	d
reviewsByUser	PullRequest.idr	/^reviewsByUser : Config => Octokit =>$/;"	d
reviewsForPrs	PullRequest.idr	/^reviewsForPrs : Config => Octokit =>$/;"	d
reviewsGraph	Graph.idr	/^reviewsGraph : Ord login => Pretty login =>$/;"	d
rightTitle	User.idr	/^  rightTitle : String$/;"	d
rootDir	FFI/Git.idr	/^rootDir : Git => Promise String$/;"	d
scoredReviewers	Data/ReviewScore.idr	/^scoredReviewers : Ord login =>$/;"	d
script	BashCompletion.idr	/^script : String$/;"	d
setConfig	Config.idr	/^setConfig : Config =>$/;"	d
settablePropNamed	Data/Config.idr	/^settablePropNamed : (name : String) -> Maybe (Exists (SettableProp name))$/;"	d
settablePropNamedOnto	Data/Config.idr	/^  settablePropNamedOnto : {p : SettableProp n h} -> Config.settablePropNamed n === (Just $ Evidence h p)$/;"	d
settablePropNames	Data/Config.idr	/^settablePropNames : List String$/;"	d
settablePropNamesAndHelp	Data/Config.idr	/^settablePropNamesAndHelp : List (String, String)$/;"	d
settableProps	Data/Config.idr	/^settableProps : List SomeSettableProp$/;"	d
settablePropsCovering	Data/Config.idr	/^  settablePropsCovering : {p : SettableProp n h} -> Elem (n ** h ** p) Config.settableProps$/;"	d
settablePropsWithHelp	Config.idr	/^settablePropsWithHelp : Config => String$/;"	d
shell	Help.idr	/^    shell : String -> String$/;"	d
shouldUseColors	Main.idr	/^shouldUseColors : HasIO io => io Bool$/;"	d
skipArg	Commands.idr	/^skipArg : ContributeArg -> Maybe Nat$/;"	d
slugify	BashCompletion.idr	/^slugify : String -> String$/;"	d
slugsOrLogins	BashCompletion.idr	/^    slugsOrLogins : List String$/;"	d
sort'	Data/ReviewScore.idr	/^      sort' : List (ReviewScore login) -> List (ReviewScore login)$/;"	d
startOver	Util.idr	/^    startOver : (Part, List Char)$/;"	d
state	Data/PullRequest.idr	/^  state     : PRState$/;"	d
state	Data/Review.idr	/^  state       : State$/;"	d
string	Language/JSON/Accessors.idr	/^string : JSON -> Either String String$/;"	d
subcommand	Help.idr	/^    subcommand : String -> String$/;"	d
submittedAt	Data/Review.idr	/^  submittedAt : Date$/;"	d
sync	Commands.idr	/^sync : Config => Octokit =>$/;"	d
syncConfig	Config.idr	/^syncConfig : Config => Octokit => (echo : Bool) -> Promise Config$/;"	d
syncIfOld	Config.idr	/^syncIfOld : Octokit => Config -> Promise Config$/;"	d
teamNameArg	Commands.idr	/^teamNameArg : GraphArg -> Maybe String$/;"	d
teamNotice	PullRequest.idr	/^    teamNotice : List String -> String$/;"	d
teamSlugs	Data/Config.idr	/^  teamSlugs     : List String$/;"	d
teams	User.idr	/^      teams : Doc AnsiStyle$/;"	d
toGHState	Data/PullRequest.idr	/^toGHState : PRState -> GitHubPRState$/;"	d
tuple	PullRequest.idr	/^tuple : PRHistory -> (List PullRequest, List PullRequest)$/;"	d
ul	User.idr	/^      ul : String -> Doc AnsiStyle$/;"	d
unslugify	BashCompletion.idr	/^unslugify : String -> String$/;"	d
unslugify	Commands.idr	/^    unslugify : (configLabels : List String) -> (slugifiedLabel : String) -> String$/;"	d
update	Config.idr	/^update : Functor f => (String -> f a) -> (a -> b -> b) -> b -> String -> f b$/;"	d
updatedAt	Data/Config.idr	/^  updatedAt     : Timestamp$/;"	d
user	Data/ReviewScore.idr	/^  user          : login$/;"	d
userEmail	FFI/Git.idr	/^userEmail : Git => Promise String$/;"	d
userNotice	PullRequest.idr	/^    userNotice : (chosenReviewer : Maybe String) -> String$/;"	d
weightReviews	Data/ReviewScore.idr	/^      weightReviews : (weight : Nat) -> List login -> List (ReviewScore login)$/;"	d
whoami	Commands.idr	/^whoami : Config => Git => Octokit =>$/;"	d
writeConfig	Config.idr	/^writeConfig : Config -> Promise Config$/;"	d
yellowDot	Graph.idr	/^    yellowDot : Doc AnsiStyle$/;"	d
yesUnlessNo	Config.idr	/^    yesUnlessNo : String -> Bool$/;"	d
zipReviews	Data/ReviewScore.idr	/^      zipReviews : List (ReviewScore login) -> List (ReviewScore login) -> Op -> (filterToSecondList : Bool) -> List (ReviewScore login)$/;"	d
|	BashCompletion.idr	/^  CURRENT_PARTIAL=$([ -z $2 ] && echo "--" || echo "$2")$/;"	c
|	BashCompletion.idr	/^  SUBCOMMAND=$([ -z ${COMP_WORDS[1]} ] && echo "--" || echo "${COMP_WORDS[1]}")$/;"	c
|	Config.idr	/^      if not (config.assignTeams || config.assignUsers)$/;"	c
|	PullRequest.idr	/^  let filteredPrs = filter (\\pr => not $ isAuthor author pr || isRequestedReviewer author pr) prs$/;"	c
|>	Commands.idr	/^  case (traverse (parseCompletedFlag <||> parseTeamArg) args) of$/;"	c
|>	Commands.idr	/^  case (traverse (parseSkipArg <||> parseCheckoutFlag) args) of$/;"	c
|>	Commands.idr	/^infix 2 <||>$/;"	c
||	Commands.idr	/^    ||| In order to support tab completion of multi-word labels, spaces have been turned into$/;"	c
||	Commands.idr	/^    ||| a label that literally contains the character used during slugification, so to$/;"	c
||	Commands.idr	/^    ||| another character to "slugify" the labels. Still, it is possible the user has entered$/;"	c
||	Commands.idr	/^    ||| then we use it exactly but if it doesn't then we unslugify it before using it.$/;"	c
||	Commands.idr	/^    ||| unslugify, we first see if a label appears in the configured list of labels. If it does$/;"	c
||	Data/Config.idr	/^  ||| A GitHub Personal Access Token. This value is only used if$/;"	c
||	Data/Config.idr	/^  ||| Configuration properties that are not written to a file.$/;"	c
||	Data/Config.idr	/^  ||| If set, a preferred editor to use for writing PR desriptions.$/;"	c
||	Data/Config.idr	/^  ||| Local cache of GitHub labels for the configured repo.$/;"	c
||	Data/Config.idr	/^  ||| Local cache of GitHub members within the configured org.$/;"	c
||	Data/Config.idr	/^  ||| Local cache of GitHub teams within the configured org.$/;"	c
||	Data/Config.idr	/^  ||| The file path where the current configuration should be$/;"	c
||	Data/Config.idr	/^  ||| The main branch. New PRs are based off of this branch.$/;"	c
||	Data/Config.idr	/^  ||| The remote name (e.g. "origin"). If unspecified, "origin" is assumed.$/;"	c
||	Data/Config.idr	/^  ||| Timestamp when the config was last syncronized with GitHub.$/;"	c
||	Data/Config.idr	/^  ||| True to assign teams as well as individual users to PRs.$/;"	c
||	Data/Config.idr	/^  ||| True to assign users as well as teams to PRs.$/;"	c
||	Data/Config.idr	/^  ||| True to comment on PRs after assigning users.$/;"	c
||	Data/Config.idr	/^  ||| True to use ANSI terminal colors.$/;"	c
||	Data/Config.idr	/^  ||| either the environment variable or this config property$/;"	c
||	Data/Config.idr	/^  ||| must be set.$/;"	c
||	Data/Config.idr	/^  ||| persisted.$/;"	c
||	Data/Config.idr	/^  ||| there is no $GITHUB_PAT environment variable set. One of$/;"	c
||	Data/Date.idr	/^              | ||| Primary Part$/;"	c
||	Data/Date.idr	/^              | ||| Separator (dash) following given primary part.$/;"	c
||	Data/PullRequest.idr	/^  ||| A List of all reviewers requested on the PR.$/;"	c
||	Data/PullRequest.idr	/^  ||| Open or Closed status.$/;"	c
||	Data/PullRequest.idr	/^  ||| The `login` of the author of the pull request.$/;"	c
||	Data/PullRequest.idr	/^  ||| The branch being merged into some other branch.$/;"	c
||	Data/PullRequest.idr	/^  ||| The pull request's "number" (as seen in URIs referring to the PR).$/;"	c
||	Data/PullRequest.idr	/^  ||| When the PR was created.$/;"	c
||	User.idr	/^  ||| Print information about the currently authenticated and configured user.$/;"	c
||	User.idr	/^  ||| Print information about the currently authenticated user's recent Pull Request$/;"	c
||	User.idr	/^  ||| This includes information that can be retrieved from Git as well as GitHub.$/;"	c
||	User.idr	/^  ||| have waiting for review, how many have been closed recently, etc.$/;"	c
||	User.idr	/^  ||| history. What review requests they have addressed or not, how many PRs they $/;"	c
